### https://mydevices.com/cayenne/docs/bring-your-own-thing-api/#cayenne-mqtt-api-supported-data-types
### Actuators
function ANALOG_ACTUATOR_ANALOG () { printf 'analog_actuator,null=%s' $1; } ### Analog Actuator (Analog)
function DIGITAL_ACTUATOR_DIGITAL () { printf 'digital_actuator,null=%s' $1; } ### Digital Actuator (Digital (0/1))
function HVAC_CHANGE_STATE_USER () { printf 'hvac_state,null=%s' $1; } ### HVAC.Change State (State)
function HVAC_CHANGE_TEMP_FAHRENHEIT () { printf 'hvac_temp,f=%s' $1; } ### HVAC.Change Temperature (Fahrenheit)
function HVAC_CHANGE_TEMP_CELSIUS () { printf 'hvac_temp,c=%s' $1; } ### HVAC.Change Temperature (Celsius)
function HVAC_OFF_ON_OFF_ON () { printf 'hvac_off_on,null=%s' $1; } ### HVAC.Off/On (Off/On)
function LIGHT_SWITCH_ACT_OFF_ON () { printf 'lt_switch_act,null=%s' $1; } ### Light Switch (Off/On)
function LIGHT_SWITCH_ACT_DIGITAL () { printf 'lt_switch_act,d=%s' $1; } ### Light Switch (Digital (0/1))
function LIGHT_SWITCH_ACT_LOW_HIGH () { printf 'lt_switch_act,null=%s' $1; } ### Light Switch (Low/High)
function LIGHTING_COLOR_HEX () { printf 'lt_color,null=%s' $1; } ### Lighting.Color (Hexadecimal)
function LIGHTING_LUMINOSITY_PERCENT () { printf 'lt_lum,p=%s' $1; } ### Lighting.Luminosity (% (0 to 100))
function LIGHTING_LUMINOSITY_LUX () { printf 'lt_lum,lux=%s' $1; } ### Lighting.Luminosity (Lux)
function LIGHTING_LUMINOSITY_VOLTS () { printf 'lt_lum,v=%s' $1; } ### Lighting.Luminosity (Volts)
function LIGHTING_LUMINOSITY_RATIO () { printf 'lt_lum,r=%s' $1; } ### Lighting.Luminosity (Ratio)
function MOTOR_OFF_ON () { printf 'motor,null=%s' $1; } ### Motor (Off/On)
function MOTOR_LOW_HIGH () { printf 'motor,null=%s' $1; } ### Motor (Low/High)
function MOTOR_DEGREE () { printf 'motor,deg=%s' $1; } ### Motor (Degree Angle)
function RELAY_OFF_ON () { printf 'relay,null=%s' $1; } ### Relay (Off/On)
function RELAY_LOW_HIGH () { printf 'relay,null=%s' $1; } ### Relay (Low/High)
function SWITCH_OFF_ON () { printf 'switch,null=%s' $1; } ### Switch (Off/On)
function SWITCH_LOW_HIGH () { printf 'switch,null=%s' $1; } ### Switch (Low/High)
function SWITCH_DIGITAL () { printf 'switch,d=%s' $1; } ### Switch (Digital (0/1))
function VALVE_OFF_ON () { printf 'valve,null=%s' $1; } ### Valve (Off/On)
function VALVE_LOW_HIGH () { printf 'valve,null=%s' $1; } ### Valve (Low/High)
function VALVE_DIGITAL () { printf 'valve,dSensors=%s' $1; } ### Valve (Digital (0/1))
### Sensors
function DIGITAL_SENSOR_DIGITAL () { printf 'digital_sensor,d=%s' $1; } ### Digital Sensor (Digital (0/1))
function ANALOG_SENSOR_ANALOG () { printf 'analog_sensor,null=%s' $1; } ### Analog Sensor (Analog)
function ABSOLUTE_HUMIDITY_GRAMS_PER_METER3 () { printf 'abs_hum,gm3=%s' $1; } ### Absolute Humidity (Grams per cubic meter)
function ABSORBED_RADIATION_RAD () { printf 'absrb_rad,rad=%s' $1; } ### Absorbed Radiation (Rad)
function ABSORBED_RADIATION_GRAY () { printf 'absrb_rad,gy=%s' $1; } ### Absorbed Radiation (Gray)
function ACCELERATION_GX_METER_PER_SEC_SQ () { printf 'gx,ms2=%s' $1; } ### Acceleration.gx axis (Meters per second squared)
function ACCELERATION_GY_METER_PER_SEC_SQ () { printf 'gy,ms2=%s' $1; } ### Acceleration.gy axis (Meters per second squared)
function ACCELERATION_GZ_METER_PER_SEC_SQ () { printf 'gz,ms2=%s' $1; } ### Acceleration.gz axis (Meters per second squared)
function ALTITUDE_METER () { printf 'alt,m=%s' $1; } ### Altitude (Meters above sea level)
function ALTITUDE_FEET () { printf 'alt,ft=%s' $1; } ### Altitude (Feet above sea level)
function AMOUNT_SUBSTANCE_MOLE () { printf 'amount,mol=%s' $1; } ### Amount of substance (Mole)
function AREA_METER2 () { printf 'area,m2=%s' $1; } ### Area (Square meter)
function BAROMETRIC_PRESSURE_PASCAL () { printf 'bp,pa=%s' $1; } ### Barometric pressure (Pascal)
function BAROMETRIC_PRESSURE_HECTOPASCAL () { printf 'bp,hpa=%s' $1; } ### Barometric pressure (Hecto Pascal)
function BATTERY_PERCENT () { printf 'batt,p=%s' $1; } ### Battery (% (0 to 100))
function BATTERY_RATIO () { printf 'batt,r=%s' $1; } ### Battery (Ratio)
function BATTERY_VOLTS () { printf 'batt,v=%s' $1; } ### Battery (Volts)
function BIOMETRIC_BYTE_ARRAY () { printf 'bio,null=%s' $1; } ### Biometric (Byte Array)
function BLOOD_CELLS_MM3 () { printf 'blood,cmm=%s' $1; } ### Blood Count (Cells by cubic millimeter)
function BLOOD_PERCENT () { printf 'blood,p=%s' $1; } ### Blood Count (% (0 to 100))
function BYTES_BIT () { printf 'bytes,bit=%s' $1; } ### Bytes (Bits)
function BYTES_BYTE () { printf 'bytes,byte=%s' $1; } ### Bytes (Bytes)
function BYTES_KB_BYTE () { printf 'bytes,kb=%s' $1; } ### Bytes (Kilobytes)
function BYTES_MB_BYTE () { printf 'bytes,mb=%s' $1; } ### Bytes (Megabytes)
function BYTES_GB_BYTE () { printf 'bytes,gb=%s' $1; } ### Bytes (Gigabytes)
function BYTES_TB_BYTE () { printf 'bytes,tb=%s' $1; } ### Bytes (Terabytes)
function CAPACITANCE_FARAD () { printf 'cap,farad=%s' $1; } ### Capacitance (Farad)
function CO2_PPM () { printf 'co2,ppm=%s' $1; } ### Carbon Dioxide (Parts per milliion)
function CO2_UNITS_MICROMOLE () { printf 'co2,wmoco2=%s' $1; } ### Carbon Dioxide (Units of Micromole)
function CHARGE_COULOMB () { printf 'charge,q=%s' $1; } ### Charge (Coulomb)
function CHOLESTEROL_MMOL_L () { printf 'chol,mmol=%s' $1; } ### Cholesterol (Millimoles/liter)
function CHOLESTEROL_MG_DL () { printf 'chol,mgdl=%s' $1; } ### Cholesterol (Milligrams/deciliter)
function COLOR_RGB () { printf 'color,null=%s' $1; } ### Color (RGB)
function COLOR_CYMK () { printf 'color,null=%s' $1; } ### Color (CYMK)
function COLOR_HEX () { printf 'color,null=%s' $1; } ### Color (Hexadecimal)
function CONDUCTANCE_SIEMEN () { printf 'conduct,s=%s' $1; } ### Conductance (Siemen)
function COUNTER_ANALOG () { printf 'counter,null=%s' $1; } ### Counter (Analog)
function CPU_PERCENT () { printf 'cpu,p=%s' $1; } ### CPU (% (0 to 100))
function CURRENT_AMP () { printf 'current,a=%s' $1; } ### Current (Ampere)
function CURRENT_DENSITY_AMP_2_METER () { printf 'current_density,am2=%s' $1; } ### Current density (Ampere per squre meter)
function DENSITY_KGM3 () { printf 'density,kgm3=%s' $1; } ### Density (Kilograms per cubic meter)
function EFFECTIVE_RADATION_ROENTGEN () { printf 'eff_rad,roent=%s' $1; } ### Effective Radiation (Roentgen)
function EFFECTIVE_RADATION_SIEVERT () { printf 'eff_rad,sv=%s' $1; } ### Effective Radiation (Sievert)
function EFFECTIVE_RADATION_SIEVERT_HOUR () { printf 'eff_rad,svph=%s' $1; } ### Effective Radiation (SieVert per Hour)
function ENERGY_KW_PER_H () { printf 'energy,kwh=%s' $1; } ### Energy (Killowatts per hour)
function EXT_WATERLEAK_ANALOG () { printf 'ext_wleak,null=%s' $1; } ### External Waterleak (Analog)
function FORCE_NEWTON () { printf 'force,null=%s' $1; } ### Force (Newtons)
function METRIC_FORCE_NEWTON () { printf 'force,null=%s' $1; } ### Metric (Newtons)
function FREQUENCY_HERTZ () { printf 'freq,hz=%s' $1; } ### Frequency (Hertz)
function GAS_PASCAL () { printf 'gas,pa=%s' $1; } ### Gas (Pascal)
function GAS_METER3 () { printf 'gas,m3=%s' $1; } ### Gas (Cubic meters)
function GAS_KGM3 () { printf 'gas,kgm3=%s' $1; } ### Gas (Kilograms per cubic meter)
function GLUCOSE_MMOL_L () { printf 'glucose,mmol=%s' $1; } ### Glucose (Millimoles/liter)
function GLUCOSE_MG_DL () { printf 'glucose,mgdl=%s' $1; } ### Glucose (Milligrams/deciliter)
function GPS_GPS () { printf 'gps,gps=%s' $1; } ### GPS (Global Positioning System)
function GPS_UTM () { printf 'gps,utm=%s' $1; } ### GPS (Universal Transverse Mercator)
function GRAVITY_X_NEWTON_PER_KG () { printf 'grav_x,nkg=%s' $1; } ### Gravity.x axis (Newtons per kilogram)
function GRAVITY_X_METER_PER_SEC_SQ () { printf 'grav_x,ms2=%s' $1; } ### Gravity.x axis (Meters per second squared)
function GRAVITY_Y_NEWTON_PER_KG () { printf 'grav_y,nkg=%s' $1; } ### Gravity.y axis (Newtons per kilogram)
function GRAVITY_Y_METER_PER_SEC_SQ () { printf 'grav_y,ms2=%s' $1; } ### Gravity.y axis (Meters per second squared)
function GRAVITY_Z_NEWTON_PER_KG () { printf 'grav_z,nkg=%s' $1; } ### Gravity.z axis (Newtons per kilogram)
function GRAVITY_Z_METER_PER_SEC_SQ () { printf 'grav_z,ms2=%s' $1; } ### Gravity.z axis (Meters per second squared)
function GYRO_X_ROTATION () { printf 'gyro_x,rot=%s' $1; } ### Gyroscope.rate of rotation around x axis (Rotation speed)
function GYRO_X_METER_PER_SEC_SQ () { printf 'gyro_x,mps2=%s' $1; } ### Gyroscope.rate of rotation around x axis (Meters per second squared)
function GYRO_Y_ROTATION () { printf 'gyro_y,rot=%s' $1; } ### Gyroscope.rate of rotation around y axis (Rotation speed)
function GYRO_Y_METER_PER_SEC_SQ () { printf 'gyro_y,mps2=%s' $1; } ### Gyroscope.rate of rotation around y axis (Meters per second squared)
function GYRO_Z_ROTATION () { printf 'gyro_z,rot=%s' $1; } ### Gyroscope.rate of rotation around z axis (Rotation speed)
function GYRO_Z_METER_PER_SEC_SQ () { printf 'gyro_z,mps2=%s' $1; } ### Gyroscope.rate of rotation around z axis (Meters per second squared)
function HVAC_HUMIDITY_PERCENT () { printf 'hvac_hum,p=%s' $1; } ### HVAC.Humdity (% (0 to 100))
function IMAGE_BYTE_ARRAY () { printf 'image,null=%s' $1; } ### Image (Byte Array)
function IMPEDANCE_OHM () { printf 'imped,ohm=%s' $1; } ### Impedance (Ohm)
function INDUCTANCE_HENRY () { printf 'induct,h=%s' $1; } ### Inductance (Henry)
function INK_BLACK_PERCENT () { printf 'ink_blk,p=%s' $1; } ### Ink Levels.Black (% (0 to 100))
function INK_CYAN_PERCENT () { printf 'ink_cya,p=%s' $1; } ### Ink Levels.Cyan (% (0 to 100))
function INK_MEGENTA_PERCENT () { printf 'ink_mag,p=%s' $1; } ### Ink Levels.Magenta (% (0 to 100))
function INK_YELLOW_PERCENT () { printf 'ink_yel,p=%s' $1; } ### Ink Levels.Yellow (% (0 to 100))
function INTRUSION_DIGITAL () { printf 'intrusion,d=%s' $1; } ### Intrusion (Digital (0/1))
function IONIZING_RADIATION_ELECTRON_VOLT () { printf 'ion_rad,ev=%s' $1; } ### Ionizing Radiation (Electron Volts)
function IONIZING_RADIATION_ERGS () { printf 'ion_rad,erg=%s' $1; } ### Ionizing Radiation (Ergs)
function IONIZING_RADIATION_JOULE () { printf 'ion_rad,j=%s' $1; } ### Ionizing Radiation (Joules)
function LENGTH_METER () { printf 'len,m=%s' $1; } ### Length (Meter)
function LENGTH_DIGITAL () { printf 'len,d=%s' $1; } ### Length (Digital (0/1))
function LENGTH_LOW_HIGH () { printf 'len,null=%s' $1; } ### Length (Low/High)
function LIGHTING_SENSE_PERCENT () { printf 'lighting_sense,p=%s' $1; } ### Lighting (% (0 to 100))
function LIGHTING_SENSE_LUX () { printf 'lighting_sense,lux=%s' $1; } ### Lighting (Lux)
function LIGHTING_SENSE_VOLTS () { printf 'lighting_sense,v=%s' $1; } ### Lighting (Volts)
function LIGHTING_SENSE_RATIO () { printf 'lighting_sense,r=%s' $1; } ### Lighting (Ratio)
function LINEAR_ACCEL_X_METER_PER_SEC_SQ () { printf 'lin_acc_x,mps2=%s' $1; } ### Linear Acceleration.x axis (Meters per second squared)
function LINEAR_ACCEL_Y_METER_PER_SEC_SQ () { printf 'lin_acc_y,mps2=%s' $1; } ### Linear Acceleration.y axis (Meters per second squared)
function LINEAR_ACCEL_Z_METER_PER_SEC_SQ () { printf 'lin_acc_z,mps2=%s' $1; } ### Linear Acceleration.z axis (Meters per second squared)
function LIQUID_LITER () { printf 'liquid,l=%s' $1; } ### Liquid (Liter)
function LIQUID_GALLON () { printf 'liquid,gal=%s' $1; } ### Liquid (Gallon)
function LIQUID_OUNCE () { printf 'liquid,oz=%s' $1; } ### Liquid (Ounce)
function LIQUID_CUBIC_CENT () { printf 'liquid,cc=%s' $1; } ### Liquid (Cubic centimeter)
function LOCATION_LAT_LATITUDE () { printf 'loc_lat,lat=%s' $1; } ### Location.Latitude (Latitude)
function LOCATION_LONG_LONGITUDE () { printf 'loc_lon,long=%s' $1; } ### Location.Longitude (Longitude)
function LUMINOSITY_LUX () { printf 'lum,lux=%s' $1; } ### Luminosity (Lux)
function LUMINOSITY_VOLTS () { printf 'lum,v=%s' $1; } ### Luminosity (Volts)
function LUMINOSITY_PERCENT () { printf 'lum,p=%s' $1; } ### Luminosity (% (0 to 100))
function LUMINOSITY_RATIO () { printf 'lum,r=%s' $1; } ### Luminosity (Ratio)
function MAGNETIC_STRENGTH_AMP_METER () { printf 'mag_str,ampm=%s' $1; } ### Magnetic field strength H (Amperes per meter)
function MAGNETIC_AXIS_X_TESLA () { printf 'mag_x,tesla=%s' $1; } ### Magnetic field.x axis (Tesla)
function MAGNETIC_AXIS_Y_TESLA () { printf 'mag_y,tesla=%s' $1; } ### Magnetic field.y axis (Tesla)
function MAGNETIC_AXIS_Z_TESLA () { printf 'mag_z,tesla=%s' $1; } ### Magnetic field.z axis (Tesla)
function MAGNETIC_FLUX_DENSITY_NEWTON_METERS_AMP () { printf 'mag_flux,nma=%s' $1; } ### Magnetic flux density B (Newton-meters per ampere)
function MASS_KILOGRAM () { printf 'mass,kg=%s' $1; } ### Mass (Kilogram)
function MEMORY_KB_BYTE () { printf 'mem,kb=%s' $1; } ### Memory (Kilobytes)
function MEMORY_MB_BYTE () { printf 'mem,mb=%s' $1; } ### Memory (Megabytes)
function MEMORY_PERCENT () { printf 'mem,p=%s' $1; } ### Memory (% (0 to 100))
function MOTION_DIGITAL () { printf 'motion,d=%s' $1; } ### Motion (Digital (0/1))
function OIL_BARREL () { printf 'oil,bbl=%s' $1; } ### Oil (Oil Barrel)
function OIL_GALLON () { printf 'oil,gal=%s' $1; } ### Oil (gallon)
function OIL_LITER () { printf 'oil,l=%s' $1; } ### Oil (liter)
function ORIENT_AZIMUTH_DEGREE () { printf 'ori_azim,deg=%s' $1; } ### Orientation.Azimuth (Degree Angle)
function ORIENT_PITCH_DEGREE () { printf 'ori_pitch,deg=%s' $1; } ### Orientation.Pitch (Degree Angle)
function ORIENT_ROLL_DEGREE () { printf 'ori_roll,deg=%s' $1; } ### Orientation.Roll (Degree Angle)
function ACIDITY_ACIDITY () { printf 'acid,acid=%s' $1; } ### pH-Acidity (Acidity)
function POWER_WATT () { printf 'pow,w=%s' $1; } ### Power (Watts)
function POLLUTION_NO2_NO2 () { printf 'no2,no2=%s' $1; } ### Pollution.Nitrogen (Nitrogen dioxide)
function POLLUTION_O3_O3 () { printf 'o3,o3=%s' $1; } ### Pollution.Ozone (Ozone)
function PRESSURE_PASCAL () { printf 'press,pa=%s' $1; } ### Pressure (Pascal)
function PRESSURE_HECTOPASCAL () { printf 'press,hpa=%s' $1; } ### Pressure (Hecto Pascal)
function PRESSURE_BAR () { printf 'press,bar=%s' $1; } ### Pressure (Bar)
function PRESSURE_TECH_ATMO () { printf 'press,at=%s' $1; } ### Pressure (Technical atmosphere)
function PRESSURE_STD_ATMO () { printf 'press,atm=%s' $1; } ### Pressure (Standard atmosphere)
function PRESSURE_TORR () { printf 'press,torr=%s' $1; } ### Pressure (Torr)
function PRESSURE_PSI () { printf 'press,psi=%s' $1; } ### Pressure (Pounds per square inch)
function PROXIMITY_CENTIMETER () { printf 'prox,cm=%s' $1; } ### Proximity (Centimeter)
function PROXIMITY_METER () { printf 'prox,m=%s' $1; } ### Proximity (Meter)
function PROXIMITY_DIGITAL () { printf 'prox,d=%s' $1; } ### Proximity (Digital (0/1))
function RADIOACTIVITY_BECQUEREL () { printf 'rad,bq=%s' $1; } ### Radioactivity (Becquerel)
function RADIOACTIVITY_CURIE () { printf 'rad,ci=%s' $1; } ### Radioactivity (Curie)
function EXPOSURE_RADIATION_ROENTGEN () { printf 'expo_rad,roent=%s' $1; } ### Radiation Exposure (Roentgen)
function EXPOSURE_RADIATION_COULOMB_PER_KG () { printf 'expo_rad,ckg=%s' $1; } ### Radiation Exposure (Coulomb/Kilogram)
function RAIN_LEVEL_CENTIMETER () { printf 'rain_level,cm=%s' $1; } ### Rain Level (Centimeter)
function RAIN_LEVEL_MILLIMETER () { printf 'rain_level,mm=%s' $1; } ### Rain Level (Millimeter)
function RELATIVE_HUMIDITY_PERCENT () { printf 'rel_hum,p=%s' $1; } ### Relative Humidity (% (0 to 100))
function RELATIVE_HUMIDITY_RATIO () { printf 'rel_hum,r=%s' $1; } ### Relative Humidity (Ratio)
function RESISTANCE_OHM () { printf 'res,ohm=%s' $1; } ### Resistance (Ohm)
function ROTATION_RPM () { printf 'rot,rpm=%s' $1; } ### Rotation (Revolutions per minute)
function ROTATION_RPMS () { printf 'rot,rpms=%s' $1; } ### Rotation (Revolutions per second)
function ROTATION_rad/s () { printf 'rot,radianps=%s' $1; } ### Rotation (Radians per second)
function ROTATION_SCALAR_ROT_SCAL () { printf 'rot_scal,null=%s' $1; } ### Rotation Vector.scalar (Cos(0/2))
function ROTATION_X_ROT_X () { printf 'rot_x,null=%s' $1; } ### Rotation Vector.x axis (X sin (0/2))
function ROTATION_Y_ROT_Y () { printf 'rot_y,null=%s' $1; } ### Rotation Vector.y axis (Y sin (0/2))
function ROTATION_Z_ROT_Z () { printf 'rot_z,null=%s' $1; } ### Rotation Vector.z axis (Z sin (0/2))
function SEISMOMETER_MICROS_PER_SEC () { printf 'seis,micps=%s' $1; } ### Seismometer (Microns (micrometers) /second,)
function SEISMOMETER_VOLTS () { printf 'seis,v=%s' $1; } ### Seismometer (Volts)
function SEISMOMETER_cm_per_hertz () { printf 'seis,cmhz=%s' $1; } ### Seismometer (Spectral Amplitude)
function SNR_DB () { printf 'snr,db=%s' $1; } ### Signal Noise Ratio (Decibels)
function SIGNAL_STRENGTH_DBM () { printf 'sig_str,dbm=%s' $1; } ### Signal Strength (Decibels per milliwatt)
function SMOKE_PERCENT () { printf 'smoke,p=%s' $1; } ### Smoke (% (0 to 100))
function SMOKE_PHOTODIODE () { printf 'smoke,pz=%s' $1; } ### Smoke (Photodiode)
function SMOKE_KILOELEC_VOLT () { printf 'smoke,kev=%s' $1; } ### Smoke (Kiloelectron Volts)
function SOIL_MOISTURE_PERCENT () { printf 'soil_moist,p=%s' $1; } ### Soil Moisture (% (0 to 100))
function SOIL_PH_ANALOG () { printf 'soil_ph,null=%s' $1; } ### Soil pH (Analog)
function SOIL_WATER_TENSION_KILOPASCAL () { printf 'soil_w_ten,kpa=%s' $1; } ### Soil Water Tension (Kilopascal)
function SOIL_WATER_TENSION_PASCAL () { printf 'soil_w_ten,pa=%s' $1; } ### Soil Water Tension (Pascal)
function SOLID_VOLUME_CUBIC_METER () { printf 'solid_vol,m3=%s' $1; } ### Solid Volume (Cubic meter)
function SOUND_DBM () { printf 'sound,dbm=%s' $1; } ### Sound (Decibels per milliwatt)
function SPECIFIC_HUMIDITY_G_PER_KG () { printf 'spec_hum,gkg=%s' $1; } ### Specific Humidity (Grams/Kilograms)
function SPEED_KM_PER_H () { printf 'speed,kmh=%s' $1; } ### Speed (Kilometer per hour)
function SPEED_MPH () { printf 'speed,mph=%s' $1; } ### Speed (Miles per hour)
function STEPS_STEPS () { printf 'steps,null=%s' $1; } ### Steps (Steps)
function STORAGE_BYTE () { printf 'storage,byte=%s' $1; } ### Storage (Bytes)
function STORAGE_KB_BYTE () { printf 'storage,kb=%s' $1; } ### Storage (Kilobytes)
function STORAGE_MB_BYTE () { printf 'storage,mb=%s' $1; } ### Storage (Megabytes)
function STORAGE_GB_BYTE () { printf 'storage,gb=%s' $1; } ### Storage (Gigabytes)
function STORAGE_TB_BYTE () { printf 'storage,tb=%s' $1; } ### Storage (Terabytes)
function STRESS_PASCAL () { printf 'stress,pa=%s' $1; } ### Stress (Pascal)
function STRESS_HECTOPASCAL () { printf 'stress,hpa=%s' $1; } ### Stress (Hecto Pascal)
function STRESS_PSI () { printf 'stress,psi=%s' $1; } ### Stress (Pounds per square inch)
function TANK_LEVEL_ANALOG () { printf 'tl,null=%s' $1; } ### Tank Level (Analog)
function TEMPERATURE_FAHRENHEIT () { printf 'temp,f=%s' $1; } ### Temperature (Fahrenheit)
function TEMPERATURE_CELSIUS () { printf 'temp,c=%s' $1; } ### Temperature (Celsius)
function TEMPERATURE_KELVIN () { printf 'temp,k=%s' $1; } ### Temperature (Kelvin)
function TIME_s () { printf 'time,sec=%s' $1; } ### Time (Second)
function TIME_ms () { printf 'time,msec=%s' $1; } ### Time (Milliseconds)
function TIME_mb () { printf 'time,min=%s' $1; } ### Time (minute)
function TIME_h () { printf 'time,hour=%s' $1; } ### Time (hour)
function TIME_d () { printf 'time,day=%s' $1; } ### Time (day)
function TIME_m () { printf 'time,month=%s' $1; } ### Time (month)
function TIME_y () { printf 'time,year=%s' $1; } ### Time (year)
function TORQUE_nm () { printf 'torq,newtm=%s' $1; } ### Torque (Newton-meter)
function TORQUE_j () { printf 'torq,j=%s' $1; } ### Torque (Joule)
function TURBIDITY_ntu () { printf 'turb,ntu=%s' $1; } ### Turbidity (Nephelometric Turbidity Unit)
function TURBIDITY_ftu () { printf 'turb,ftu=%s' $1; } ### Turbidity (Formazin Turbidity Unit)
function ULTRASONIC_khz () { printf 'ultra,khz=%s' $1; } ### Ultrasonic (Kilohertz)
function VELOCITY_METER_PER_SEC () { printf 'velo,mps=%s' $1; } ### Velocity (Meters per second squared)
function VISCOSITY_MILLIPASCAL_SEC () { printf 'visco,mpas=%s' $1; } ### Viscosity (Millipascal-second)
function VOLTAGE_VOLTS () { printf 'voltage,v=%s' $1; } ### Voltage (Volts)
function VOLTAGE_MILLIVOLTS () { printf 'voltage,mv=%s' $1; } ### Voltage (Millivolts)
function VOLUME_CUBIC_METER () { printf 'vol,m3=%s' $1; } ### Volume (Cubic meter)
function WATER_GPM () { printf 'h20,gpm=%s' $1; } ### Water (Gallons per minute)
function WATER_CUBIC_FEET_SEC () { printf 'h20,cfs=%s' $1; } ### Water (Cubic feet per second)
function WAVELENGTH_METER () { printf 'wave,m=%s' $1; } ### Wavelength (Meters)
function WEIGHT_POUND () { printf 'weight,lbs=%s' $1; } ### Weight (Pounds)
function WEIGHT_KILOGRAM () { printf 'weight,kg=%s' $1; } ### Weight (Kilogram)
function RSSI_DBM () { printf 'rssi,dbm=%s' $1; } ### Received signal strength indicator (RSSI)
function WIND_SPEED_KM_PER_H () { printf 'wind_speed,kmh=%s' $1; } ### Wind Speed (Kilometer per hour)
