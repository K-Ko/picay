### 2018-06-12 / https://mydevices.com/cayenne/docs/cayenne-mqtt-api/#cayenne-mqtt-api-mqtt-messaging-topics-examples
### Type Constant & Value (* Denotes default value for Unit.)
function ANALOG_ACTUATOR_ANALOG () { printf 'analog_actuator,null=%s' $1; }   ### Analog Actuator (Analog)
function DIGITAL_ACTUATOR_DIGITAL () { printf 'digital_actuator,d=%s' $1; }   ### Digital Actuator (Digital (0/1))
function DIGITAL_SENSOR_DIGITAL () { printf 'digital_sensor,d=%s' $1; }       ### Digital Sensor (Digital (0/1))
function ANALOG_SENSOR_ANALOG () { printf 'analog_sensor,null=%s' $1; }       ### Analog Sensor (Analog)
function ACCELERATION_G () { printf 'accel,g=%s' $1; }                        ### Acceleration (Acceleration)
function BAROMETRIC_PRESSURE_PASCAL () { printf 'bp,pa=%s' $1; }              ### Barometric pressure (* Pascal)
function BAROMETRIC_PRESSURE_HECTOPASCAL () { printf 'bp,hpa=%s' $1; }        ### Barometric pressure (Hecto Pascal)
function BATTERY_PERCENT () { printf 'batt,p=%s' $1; }                        ### Battery (% (0 to 100))
function BATTERY_RATIO () { printf 'batt,r=%s' $1; }                          ### Battery (Ratio)
function BATTERY_VOLTS () { printf 'batt,v=%s' $1; }                          ### Battery (* Volts)
function CO2_PPM () { printf 'co2,ppm=%s' $1; }                               ### Carbon Dioxide (Parts per milliion)
function COUNTER_ANALOG () { printf 'counter,null=%s' $1; }                   ### Counter (Analog)
function CURRENT_AMP () { printf 'current,a=%s' $1; }                         ### Current (* Ampere)
function CURRENT_MAMP () { printf 'current,ma=%s' $1; }                       ### Current (Milliampere)
function ENERGY_KWH () { printf 'energy,kwh=%s' $1; }                         ### Energy (Killowatt Hour)
function EXT_WATERLEAK_ANALOG () { printf 'ext_wleak,null=%s' $1; }           ### External Waterleak (Analog)
function FREQUENCY_HERTZ () { printf 'freq,hz=%s' $1; }                       ### Frequency (Hertz)
function GPS_GPS () { printf 'gps,m=%s' $1; }                                 ### GPS (* GPS)
function GYROSCOPE_ROTATION_PER_MINUTE () { printf 'gyro,rpm=%s' $1; }        ### Gyroscope (* Rotation per minute)
function GYROSCOPE_DEGREE_PER_SEC () { printf 'gyro,dps=%s' $1; }             ### Gyroscope (Degree per second)
function LUMINOSITY_LUX () { printf 'lum,lux=%s' $1; }                        ### Luminosity (* Lux)
function LUMINOSITY_VOLTS () { printf 'lum,v=%s' $1; }                        ### Luminosity (Volts)
function LUMINOSITY_PERCENT () { printf 'lum,p=%s' $1; }                      ### Luminosity (% (0 to 100))
function LUMINOSITY_RATIO () { printf 'lum,r=%s' $1; }                        ### Luminosity (Ratio)
function MOTION_DIGITAL () { printf 'motion,d=%s' $1; }                       ### Motion (Digital (0/1))
function POWER_WATT () { printf 'pow,w=%s' $1; }                              ### Power (* Watts)
function POWER_KILOWATT () { printf 'pow,kw=%s' $1; }                         ### Power (Kilowatts)
function PROXIMITY_CENTIMETER () { printf 'prox,cm=%s' $1; }                  ### Proximity (* Centimeter)
function PROXIMITY_METER () { printf 'prox,m=%s' $1; }                        ### Proximity (Meter)
function PROXIMITY_DIGITAL () { printf 'prox,d=%s' $1; }                      ### Proximity (Digital (0/1))
function RAIN_LEVEL_CENTIMETER () { printf 'rain_level,cm=%s' $1; }           ### Rain Level (Centimeter)
function RAIN_LEVEL_MILLIMETER () { printf 'rain_level,mm=%s' $1; }           ### Rain Level (* Millimeter)
function RSSI_DBM () { printf 'rssi,dbm=%s' $1; }                             ### Received signal strength indicator (dBm)
function RELATIVE_HUMIDITY_PERCENT () { printf 'rel_hum,p=%s' $1; }           ### Relative Humidity (* Percent (%))
function RELATIVE_HUMIDITY_RATIO () { printf 'rel_hum,r=%s' $1; }             ### Relative Humidity (Ratio)
function RESISTANCE_OHM () { printf 'res,ohm=%s' $1; }                        ### Resistance (Ohm)
function SNR_DB () { printf 'snr,db=%s' $1; }                                 ### Signal Noise Ratio (Decibels)
function SOIL_MOISTURE_PERCENT () { printf 'soil_moist,p=%s' $1; }            ### Soil Moisture (Percent (%))
function SOIL_PH_ANALOG () { printf 'soil_ph,null=%s' $1; }                   ### Soil pH (Analog)
function SOIL_WATER_TENSION_KILOPASCAL () { printf 'soil_w_ten,kpa=%s' $1; }  ### Soil Water Tension (* Kilopascal)
function SOIL_WATER_TENSION_PASCAL () { printf 'soil_w_ten,pa=%s' $1; }       ### Soil Water Tension (Pascal)
function TANK_LEVEL_ANALOG () { printf 'tl,null=%s' $1; }                     ### Tank Level (Analog)
function TEMPERATURE_FAHRENHEIT () { printf 'temp,f=%s' $1; }                 ### Temperature (Fahrenheit)
function TEMPERATURE_CELSIUS () { printf 'temp,c=%s' $1; }                    ### Temperature (* Celsius)
function TEMPERATURE_KELVIN () { printf 'temp,k=%s' $1; }                     ### Temperature (Kelvin)
function VOLTAGE_VOLTS () { printf 'voltage,v=%s' $1; }                       ### Voltage (* Volts)
function VOLTAGE_MILLIVOLTS () { printf 'voltage,mv=%s' $1; }                 ### Voltage (Millivolts)
function WIND_SPEED_KM_PER_H () { printf 'wind_speed,kmh=%s' $1; }            ### Wind Speed (Kilometer per hour)
